{"ast":null,"code":"import _objectSpread from \"@babel/runtime-corejs2/helpers/esm/objectSpread\";\n//dummy User\nconst dummyUser = {\n  nickname: \"윤민수\",\n  Post: [],\n  Followings: [],\n  Followers: [],\n  id: 1\n}; //intial State\n\nexport const initialState = {\n  isLoggedIn: false,\n  //로그인 여부\n  isLoggingIn: false,\n  // 로그인 시도중\n  logInErrorReason: '',\n  // 로그인 실패 사유\n  isLoggingOut: false,\n  // 로그아웃 시도중\n  isSignedUp: false,\n  //회원가입 성공,\n  isSigningUp: false,\n  //회원가입 시도중,\n  signUpErrorReason: '',\n  //회원가입 실패 사유\n  me: null,\n  //내 정보\n  followingList: [],\n  //팔로잉 리스트\n  followerList: [],\n  //팔로워 리스트\n  userInfo: null //남의 정보\n\n}; //Action 이름 정하기\n//보통 비동기처리를 하는 Action들은 Request/Success/Failure 총 3개로 나눈다\n//회원가입\n\nexport const SIGN_UP_REQUEST = 'SIGN_UP_REQUEST';\nexport const SIGN_UP_SUCCESS = 'SIGN_UP_SUCCESS';\nexport const SIGN_UP_FAILURE = 'SIGN_UP_FAILURE'; //로그인\n\nexport const LOG_IN_REQUEST = 'LOG_IN_REQUEST';\nexport const LOG_IN_SUCCESS = 'LOG_IN_SUCCESS';\nexport const LOG_IN_FAILURE = 'LOG_IN_FAILURE'; //유저정보 서버로부터 받아들이기\n\nexport const LOAD_USER_REQUEST = 'LOAD_USER_REQUEST';\nexport const LOAD_USER_SUCCESS = 'LOAD_USER_SUCCESS';\nexport const LOAD_USER_FAILURE = 'LOAD_USER_FAILURE'; //로그아웃\n\nexport const LOG_OUT_REQUEST = 'LOG_OUT_REQUEST';\nexport const LOG_OUT_SUCCESS = 'LOG_OUT_SUCCESS';\nexport const LOG_OUT_FAILURE = 'LOG_OUT_FAILURE'; //팔로잉, 팔로워 정보 서버로부터 받아들이기\n\nexport const LOAD_FOLLOW_REQUEST = 'LOAD_FOLLOW_REQUEST';\nexport const LOAD_FOLLOW_SUCCESS = 'LOAD_FOLLOW_SUCCESS';\nexport const LOAD_FOLLOW_FAILURE = 'LOAD_FOLLOW_FAILURE'; //팔로우 요청\n\nexport const FOLLOW_USER_REQUEST = 'FOLLOW_USER_REQUEST';\nexport const FOLLOW_USER_SUCCESS = 'FOLLOW_USER_SUCCESS';\nexport const FOLLOW_USER_FAILURE = 'FOLLOW_USER_FAILURE'; //팔로우 취소요청\n\nexport const UNFOLLOW_USER_REQUEST = 'UNFOLLOW_USER_REQUEST';\nexport const UNFOLLOW_USER_SUCCESS = 'UNFOLLOW_USER_SUCCESS';\nexport const UNFOLLOW_USER_FAILURE = 'UNFOLLOW_USER_FAILURE'; //팔로워 삭제 요청\n\nexport const REMOVE_FOLLOWER_REQUEST = 'REMOVE_FOLLOWER_REQUEST';\nexport const REMOVE_FOLLOWER_SUCCESS = 'REMOVE_FOLLOWER_SUCCESS';\nexport const REMOVE_FOLLOWER_FAILURE = 'REMOVE_FOLLOWER_FAILURE'; //아직 뭐하는 녀석인지는 모름\n\nexport const ADD_POST_TO_ME = 'ADD_POST_TO_ME'; //reducer 부분\n//반드시 reducer는 action의 값을 받아 initialState를 바꿔주는 역할을 하기에 인자로써, initialState와 action을 넣어준다\n\nexport default ((state = initialState, action) => {\n  switch (action.type) {\n    case LOG_IN_REQUEST:\n      {\n        return _objectSpread({}, state, {\n          isLoggingIn: true\n        });\n      }\n\n    case LOG_IN_SUCCESS:\n      {\n        return _objectSpread({}, state, {\n          isLoggingIn: false,\n          isLoggedIn: true,\n          me: dummyUser\n        });\n      }\n\n    case LOG_IN_FAILURE:\n      {\n        return _objectSpread({}, state, {\n          isLoggingIn: false,\n          isLoggedIn: false,\n          logInErrorReason: action.error,\n          me: null\n        });\n      }\n\n    case LOG_OUT_REQUEST:\n      {\n        return _objectSpread({}, state, {\n          isLoggedIn: false,\n          me: null\n        });\n      }\n\n    case SIGN_UP_REQUEST:\n      {\n        return _objectSpread({}, state, {\n          isSigningUp: true,\n          isSignedUp: false,\n          signUpErrorReason: ''\n        });\n      }\n\n    case SIGN_UP_SUCCESS:\n      {\n        return _objectSpread({}, state, {\n          isSigningUp: false,\n          isSignedUp: true,\n          signUpErrorReason: ''\n        });\n      }\n\n    case SIGN_UP_FAILURE:\n      {\n        return _objectSpread({}, state, {\n          isSigningUp: false,\n          signUpErrorReason: action.error\n        });\n      }\n\n    default:\n      {\n        return _objectSpread({}, state);\n      }\n  }\n});","map":{"version":3,"sources":["/home/minsu/바탕화면/sns/ch1/front/reducers/user.js"],"names":["dummyUser","nickname","Post","Followings","Followers","id","initialState","isLoggedIn","isLoggingIn","logInErrorReason","isLoggingOut","isSignedUp","isSigningUp","signUpErrorReason","me","followingList","followerList","userInfo","SIGN_UP_REQUEST","SIGN_UP_SUCCESS","SIGN_UP_FAILURE","LOG_IN_REQUEST","LOG_IN_SUCCESS","LOG_IN_FAILURE","LOAD_USER_REQUEST","LOAD_USER_SUCCESS","LOAD_USER_FAILURE","LOG_OUT_REQUEST","LOG_OUT_SUCCESS","LOG_OUT_FAILURE","LOAD_FOLLOW_REQUEST","LOAD_FOLLOW_SUCCESS","LOAD_FOLLOW_FAILURE","FOLLOW_USER_REQUEST","FOLLOW_USER_SUCCESS","FOLLOW_USER_FAILURE","UNFOLLOW_USER_REQUEST","UNFOLLOW_USER_SUCCESS","UNFOLLOW_USER_FAILURE","REMOVE_FOLLOWER_REQUEST","REMOVE_FOLLOWER_SUCCESS","REMOVE_FOLLOWER_FAILURE","ADD_POST_TO_ME","state","action","type","error"],"mappings":"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","sourcesContent":["//dummy User\nconst dummyUser = {\n  nickname: \"윤민수\",\n  Post: [],\n  Followings: [],\n  Followers: [],\n  id: 1\n}\n\n//intial State\nexport const initialState = {\n  isLoggedIn : false, //로그인 여부\n  isLoggingIn : false, // 로그인 시도중\n  logInErrorReason: '', // 로그인 실패 사유\n  isLoggingOut: false, // 로그아웃 시도중\n  isSignedUp: false, //회원가입 성공,\n  isSigningUp : false, //회원가입 시도중,\n  signUpErrorReason: '', //회원가입 실패 사유\n  me: null, //내 정보\n  followingList: [], //팔로잉 리스트\n  followerList: [], //팔로워 리스트\n  userInfo: null, //남의 정보\n}\n\n//Action 이름 정하기\n//보통 비동기처리를 하는 Action들은 Request/Success/Failure 총 3개로 나눈다\n\n//회원가입\nexport const SIGN_UP_REQUEST = 'SIGN_UP_REQUEST'\nexport const SIGN_UP_SUCCESS = 'SIGN_UP_SUCCESS'\nexport const SIGN_UP_FAILURE = 'SIGN_UP_FAILURE'\n\n//로그인\nexport const LOG_IN_REQUEST = 'LOG_IN_REQUEST'\nexport const LOG_IN_SUCCESS = 'LOG_IN_SUCCESS'\nexport const LOG_IN_FAILURE = 'LOG_IN_FAILURE'\n\n//유저정보 서버로부터 받아들이기\nexport const LOAD_USER_REQUEST = 'LOAD_USER_REQUEST'\nexport const LOAD_USER_SUCCESS = 'LOAD_USER_SUCCESS'\nexport const LOAD_USER_FAILURE = 'LOAD_USER_FAILURE'\n\n//로그아웃\nexport const LOG_OUT_REQUEST = 'LOG_OUT_REQUEST'\nexport const LOG_OUT_SUCCESS = 'LOG_OUT_SUCCESS'\nexport const LOG_OUT_FAILURE = 'LOG_OUT_FAILURE'\n\n//팔로잉, 팔로워 정보 서버로부터 받아들이기\nexport const LOAD_FOLLOW_REQUEST = 'LOAD_FOLLOW_REQUEST'\nexport const LOAD_FOLLOW_SUCCESS = 'LOAD_FOLLOW_SUCCESS'\nexport const LOAD_FOLLOW_FAILURE = 'LOAD_FOLLOW_FAILURE'\n\n//팔로우 요청\nexport const FOLLOW_USER_REQUEST = 'FOLLOW_USER_REQUEST'\nexport const FOLLOW_USER_SUCCESS = 'FOLLOW_USER_SUCCESS'\nexport const FOLLOW_USER_FAILURE = 'FOLLOW_USER_FAILURE'\n\n//팔로우 취소요청\nexport const UNFOLLOW_USER_REQUEST = 'UNFOLLOW_USER_REQUEST'\nexport const UNFOLLOW_USER_SUCCESS = 'UNFOLLOW_USER_SUCCESS'\nexport const UNFOLLOW_USER_FAILURE = 'UNFOLLOW_USER_FAILURE'\n\n//팔로워 삭제 요청\nexport const REMOVE_FOLLOWER_REQUEST = 'REMOVE_FOLLOWER_REQUEST'\nexport const REMOVE_FOLLOWER_SUCCESS = 'REMOVE_FOLLOWER_SUCCESS'\nexport const REMOVE_FOLLOWER_FAILURE = 'REMOVE_FOLLOWER_FAILURE'\n\n//아직 뭐하는 녀석인지는 모름\nexport const ADD_POST_TO_ME = 'ADD_POST_TO_ME'\n\n//reducer 부분\n//반드시 reducer는 action의 값을 받아 initialState를 바꿔주는 역할을 하기에 인자로써, initialState와 action을 넣어준다\nexport default (state = initialState, action ) => {\n  switch(action.type) {\n    case LOG_IN_REQUEST: {\n      return {\n        ...state,\n        isLoggingIn : true\n      }\n    }\n    case LOG_IN_SUCCESS: {\n      return {\n        ...state,\n        isLoggingIn: false,\n        isLoggedIn: true,\n        me: dummyUser,\n      }\n    }\n    case LOG_IN_FAILURE: {\n      return {\n        ...state,\n        isLoggingIn: false,\n        isLoggedIn: false,\n        logInErrorReason : action.error,\n        me: null\n      }\n    }\n    case LOG_OUT_REQUEST: {\n      return {\n        ...state,\n        isLoggedIn: false,\n        me: null,\n      }\n    }\n    case SIGN_UP_REQUEST: {\n      return {\n        ...state,\n        isSigningUp: true,\n        isSignedUp: false,\n        signUpErrorReason: ''\n      }\n    }\n    case SIGN_UP_SUCCESS: {\n      return {\n        ...state,\n        isSigningUp: false,\n        isSignedUp: true,\n        signUpErrorReason: ''\n      }\n    }\n    case SIGN_UP_FAILURE: {\n      return {\n        ...state,\n        isSigningUp: false,\n        signUpErrorReason: action.error\n      }\n    }\n    default: {\n      return {\n        ...state\n      }\n    }\n  }\n}\n\n\n"]},"metadata":{},"sourceType":"module"}