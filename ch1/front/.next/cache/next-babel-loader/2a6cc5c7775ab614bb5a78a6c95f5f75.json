{"ast":null,"code":"import { all, fork, call, takeLatest, takeEvery, put, take, delay } from 'redux-saga/effects';\nimport { LOG_IN, LOG_OUT, SIGN_UP, LOG_IN_SUCCESS, LOG_IN_FAILURE } from '../reducers/user'; //put은 dispatch = action을 받아서 실행하는 놈\n//take는 action을 받는 놈\n//takeEvery 는 모든 action을 다 받고 실행\n//takeLatest는 이전 요청이 끝나지 않은게 있다면 이전 요청을 취소함\n//--> 보통 로그인 버튼 여러번 클릭하면 서버에 계속 전송 되는 걸 막을 때 사용 됨\n//takeEvery VS takeLatest\n//--> takeEvery의 경우 모든 이벤트를 모두 유효처리 할 때, takeLatest는 앞선 이벤트들은 모두 실수라 보고 마지막 이벤트만 유효처리할 때\n//call과 fork 모두 함수 실행 메서드\n//call은 동기호출(보통 서버와 통신할 때 주로 쓰임)\n//fork는 비동기호출\n\nconst HELLO_SAGA = 'HELLO_SAGA'; //서버에 요청 보내는 부분\n\nfunction loginAPI() {}\n\nfunction* login() {\n  try {\n    yield delay(2000);\n    yield put({\n      type: LOG_IN_SUCCESS\n    });\n  } catch (e) {\n    console.error(e);\n    yield put({\n      type: LOG_IN_FAILURE\n    });\n  }\n}\n\nfunction* watchLogin() {\n  yield take(LOG_IN);\n  yield put({\n    type: LOG_IN_SUCCESS\n  });\n}\n\n;\nexport default function* userSaga() {\n  yield all(watchLogin(), watchSignUp());\n}","map":{"version":3,"sources":["/home/minsu/바탕화면/sns/ch1/front/sagas/user.js"],"names":["all","fork","call","takeLatest","takeEvery","put","take","delay","LOG_IN","LOG_OUT","SIGN_UP","LOG_IN_SUCCESS","LOG_IN_FAILURE","HELLO_SAGA","loginAPI","login","type","e","console","error","watchLogin","userSaga","watchSignUp"],"mappings":"AAAA,SAASA,GAAT,EAAcC,IAAd,EAAoBC,IAApB,EAA0BC,UAA1B,EAAsCC,SAAtC,EAAiDC,GAAjD,EAAsDC,IAAtD,EAA4DC,KAA5D,QAAyE,oBAAzE;AACA,SAASC,MAAT,EAAiBC,OAAjB,EAA0BC,OAA1B,EAAoCC,cAApC,EAAoDC,cAApD,QAA0E,kBAA1E,C,CACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;;AAGA,MAAMC,UAAU,GAAG,YAAnB,C,CAEA;;AACA,SAASC,QAAT,GAAoB,CAEnB;;AAED,UAAUC,KAAV,GAAkB;AAChB,MAAI;AACF,UAAMR,KAAK,CAAC,IAAD,CAAX;AACA,UAAMF,GAAG,CAAC;AACRW,MAAAA,IAAI,EAAEL;AADE,KAAD,CAAT;AAGD,GALD,CAKE,OAAOM,CAAP,EAAU;AACVC,IAAAA,OAAO,CAACC,KAAR,CAAcF,CAAd;AACA,UAAMZ,GAAG,CAAC;AACRW,MAAAA,IAAI,EAAEJ;AADE,KAAD,CAAT;AAGD;AACF;;AAED,UAAUQ,UAAV,GAAuB;AACrB,QAAMd,IAAI,CAACE,MAAD,CAAV;AACA,QAAMH,GAAG,CAAC;AACRW,IAAAA,IAAI,EAAEL;AADE,GAAD,CAAT;AAGD;;AAAA;AAED,eAAe,UAAUU,QAAV,GAAqB;AAClC,QAAMrB,GAAG,CACPoB,UAAU,EADH,EAEPE,WAAW,EAFJ,CAAT;AAID","sourcesContent":["import { all, fork, call, takeLatest, takeEvery, put, take, delay } from 'redux-saga/effects';\nimport { LOG_IN, LOG_OUT, SIGN_UP,  LOG_IN_SUCCESS, LOG_IN_FAILURE } from '../reducers/user';\n//put은 dispatch = action을 받아서 실행하는 놈\n//take는 action을 받는 놈\n\n//takeEvery 는 모든 action을 다 받고 실행\n//takeLatest는 이전 요청이 끝나지 않은게 있다면 이전 요청을 취소함\n//--> 보통 로그인 버튼 여러번 클릭하면 서버에 계속 전송 되는 걸 막을 때 사용 됨\n\n//takeEvery VS takeLatest\n//--> takeEvery의 경우 모든 이벤트를 모두 유효처리 할 때, takeLatest는 앞선 이벤트들은 모두 실수라 보고 마지막 이벤트만 유효처리할 때\n\n//call과 fork 모두 함수 실행 메서드\n//call은 동기호출(보통 서버와 통신할 때 주로 쓰임)\n//fork는 비동기호출\n\n\nconst HELLO_SAGA = 'HELLO_SAGA';\n\n//서버에 요청 보내는 부분\nfunction loginAPI() {\n  \n}\n\nfunction* login() {\n  try {\n    yield delay(2000);\n    yield put({\n      type: LOG_IN_SUCCESS\n    })\n  } catch (e) {\n    console.error(e);\n    yield put({\n      type: LOG_IN_FAILURE\n    });\n  }\n}\n\nfunction* watchLogin() {\n  yield take(LOG_IN);\n  yield put({\n    type: LOG_IN_SUCCESS\n  })\n};\n\nexport default function* userSaga() {\n  yield all(\n    watchLogin(),\n    watchSignUp(),\n  )\n}\n\n"]},"metadata":{},"sourceType":"module"}