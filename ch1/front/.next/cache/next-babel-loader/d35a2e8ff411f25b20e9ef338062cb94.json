{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\n\nvar _marked =\n/*#__PURE__*/\n_regeneratorRuntime.mark(addPost),\n    _marked2 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(watchAddPost),\n    _marked3 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(addComment),\n    _marked4 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(watchAddComment),\n    _marked5 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(postSaga);\n\nimport { all, delay, fork, call, takeEvery, takeLateset, put } from 'redux-saga/effects'; //무엇을 Import 해와야 하는지 생각할 것\n\nimport { ADD_POST_REQUEST, ADD_POST_SUCCESS, ADD_POST_FAILURE, ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_COMMENT_FAILURE } from '../reducers/post';\n\nfunction addPostAPI() {}\n\nfunction addPost() {\n  return _regeneratorRuntime.wrap(function addPost$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          _context.next = 3;\n          return delay(2000);\n\n        case 3:\n          _context.next = 5;\n          return put({\n            type: ADD_POST_SUCCESS\n          });\n\n        case 5:\n          _context.next = 12;\n          break;\n\n        case 7:\n          _context.prev = 7;\n          _context.t0 = _context[\"catch\"](0);\n          console.log(_context.t0);\n          _context.next = 12;\n          return put({\n            type: ADD_POST_FAILURE,\n            error: _context.t0\n          });\n\n        case 12:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[0, 7]]);\n}\n\nfunction watchAddPost() {\n  return _regeneratorRuntime.wrap(function watchAddPost$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.next = 2;\n          return takeEvery(ADD_POST_REQUEST, addPost);\n\n        case 2:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2);\n}\n\nfunction addCommentAPI() {}\n\nfunction addComment(action) {\n  return _regeneratorRuntime.wrap(function addComment$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.prev = 0;\n          _context3.next = 3;\n          return call(addCommentAPI);\n\n        case 3:\n          _context3.next = 5;\n          return dalay(2000);\n\n        case 5:\n          _context3.next = 7;\n          return put({\n            type: ADD_COMMENT_SUCCESS,\n            data: {\n              postId: action.data.postId\n            }\n          });\n\n        case 7:\n          _context3.next = 13;\n          break;\n\n        case 9:\n          _context3.prev = 9;\n          _context3.t0 = _context3[\"catch\"](0);\n          _context3.next = 13;\n          return put({\n            type: ADD_COMMENT_FAILURE,\n            error: _context3.t0\n          });\n\n        case 13:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3, null, [[0, 9]]);\n}\n\nfunction watchAddComment() {\n  return _regeneratorRuntime.wrap(function watchAddComment$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          _context4.next = 2;\n          return takeLatest(ADD_COMMENT_REQUEST, addComment);\n\n        case 2:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, _marked4);\n}\n\nexport default function postSaga() {\n  return _regeneratorRuntime.wrap(function postSaga$(_context5) {\n    while (1) {\n      switch (_context5.prev = _context5.next) {\n        case 0:\n          _context5.next = 2;\n          return all([fork(watchAddPost), fork(watchAddComment)]);\n\n        case 2:\n        case \"end\":\n          return _context5.stop();\n      }\n    }\n  }, _marked5);\n}","map":{"version":3,"sources":["/home/minsu/바탕화면/sns/ch1/front/sagas/post.js"],"names":["addPost","watchAddPost","addComment","watchAddComment","postSaga","all","delay","fork","call","takeEvery","takeLateset","put","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","addPostAPI","type","console","log","error","addCommentAPI","action","dalay","data","postId","takeLatest"],"mappings":";;;;yBAeUA,O;;;yBAgBAC,Y;;;yBAQAC,U;;;yBAkBAC,e;;;yBAIeC,Q;;AA7DzB,SAASC,GAAT,EAAcC,KAAd,EAAqBC,IAArB,EAA2BC,IAA3B,EAAiCC,SAAjC,EAA4CC,WAA5C,EAAyDC,GAAzD,QAAoE,oBAApE,C,CACA;;AACA,SACEC,gBADF,EAEEC,gBAFF,EAGEC,gBAHF,EAIEC,mBAJF,EAKEC,mBALF,EAMEC,mBANF,QAOO,kBAPP;;AASA,SAASC,UAAT,GAAsB,CAErB;;AAED,SAAUlB,OAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGI,iBAAMM,KAAK,CAAC,IAAD,CAAX;;AAHJ;AAAA;AAII,iBAAMK,GAAG,CAAC;AACRQ,YAAAA,IAAI,EAAEN;AADE,WAAD,CAAT;;AAJJ;AAAA;AAAA;;AAAA;AAAA;AAAA;AAQIO,UAAAA,OAAO,CAACC,GAAR;AARJ;AASI,iBAAMV,GAAG,CAAC;AACRQ,YAAAA,IAAI,EAAEL,gBADE;AAERQ,YAAAA,KAAK;AAFG,WAAD,CAAT;;AATJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAgBA,SAAUrB,YAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACE,iBAAMQ,SAAS,CAACG,gBAAD,EAAmBZ,OAAnB,CAAf;;AADF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAIA,SAASuB,aAAT,GAA0B,CAEzB;;AAED,SAAUrB,UAAV,CAAqBsB,MAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEI,iBAAMhB,IAAI,CAACe,aAAD,CAAV;;AAFJ;AAAA;AAGI,iBAAME,KAAK,CAAC,IAAD,CAAX;;AAHJ;AAAA;AAII,iBAAMd,GAAG,CAAC;AACRQ,YAAAA,IAAI,EAAEH,mBADE;AAERU,YAAAA,IAAI,EAAE;AACJC,cAAAA,MAAM,EAAEH,MAAM,CAACE,IAAP,CAAYC;AADhB;AAFE,WAAD,CAAT;;AAJJ;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAWI,iBAAMhB,GAAG,CAAC;AACRQ,YAAAA,IAAI,EAAEF,mBADE;AAERK,YAAAA,KAAK;AAFG,WAAD,CAAT;;AAXJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAkBA,SAAUnB,eAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACE,iBAAMyB,UAAU,CAACb,mBAAD,EAAsBb,UAAtB,CAAhB;;AADF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAIA,eAAe,SAAUE,QAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACb,iBAAMC,GAAG,CAAC,CACRE,IAAI,CAACN,YAAD,CADI,EAERM,IAAI,CAACJ,eAAD,CAFI,CAAD,CAAT;;AADa;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import { all, delay, fork, call, takeEvery, takeLateset, put } from 'redux-saga/effects';\n//무엇을 Import 해와야 하는지 생각할 것\nimport {\n  ADD_POST_REQUEST,\n  ADD_POST_SUCCESS,\n  ADD_POST_FAILURE,\n  ADD_COMMENT_REQUEST,\n  ADD_COMMENT_SUCCESS,\n  ADD_COMMENT_FAILURE\n} from '../reducers/post';\n\nfunction addPostAPI() {\n\n}\n\nfunction* addPost() {\n  try {\n    // yield call(addPostAPI);\n    yield delay(2000);\n    yield put({\n      type: ADD_POST_SUCCESS\n    })\n  } catch(e) {\n    console.log(e);\n    yield put({\n      type: ADD_POST_FAILURE,\n      error: e\n    })\n  }\n}\n\nfunction* watchAddPost() {\n  yield takeEvery(ADD_POST_REQUEST, addPost)\n}\n\nfunction addCommentAPI () {\n\n}\n\nfunction* addComment(action) {\n  try {\n    yield call(addCommentAPI)\n    yield dalay(2000);\n    yield put({\n      type: ADD_COMMENT_SUCCESS,\n      data: {\n        postId: action.data.postId\n      }\n    })\n  } catch(e) {\n    yield put({\n      type: ADD_COMMENT_FAILURE,\n      error: e\n    })\n  }\n}\n\nfunction* watchAddComment() {\n  yield takeLatest(ADD_COMMENT_REQUEST, addComment)\n}\n\nexport default function* postSaga() {\n  yield all([\n    fork(watchAddPost),\n    fork(watchAddComment)\n  ]);\n}"]},"metadata":{},"sourceType":"module"}