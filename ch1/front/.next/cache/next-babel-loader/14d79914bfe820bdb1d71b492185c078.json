{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\n\nvar _marked =\n/*#__PURE__*/\n_regeneratorRuntime.mark(login),\n    _marked2 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(watchLogin),\n    _marked3 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(signUp),\n    _marked4 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(watchSignUp),\n    _marked5 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(userSaga);\n\n//put은 dispatch = action을 받아서 실행하는 놈\n//take는 action을 받는 놈\n//takeEvery 는 모든 action을 다 받고 실행\n//takeLatest는 이전 요청이 끝나지 않은게 있다면 이전 요청을 취소함\n//--> 보통 로그인 버튼 여러번 클릭하면 서버에 계속 전송 되는 걸 막을 때 사용 됨\n//takeEvery VS takeLatest\n//--> takeEvery의 경우 모든 이벤트를 모두 유효처리 할 때, takeLatest는 앞선 이벤트들은 모두 실수라 보고 마지막 이벤트만 유효처리할 때\n//call과 fork 모두 함수 실행 메서드\n//call은 동기호출(보통 서버와 통신할 때 주로 쓰임)\n//fork는 비동기호출\nimport { all, fork, call, takeLatest, takeEvery, put, take, delay } from 'redux-saga/effects'; //서버로 갔다 와야하는 비동기처리 Action들은 SAGA에서 모두 처리 해준다\n\nimport { LOG_IN_REQUEST, LOG_IN_SUCCESS, LOG_IN_FAILURE, SIGN_UP_REQUEST, SIGN_UP_SUCCESS, SIGN_UP_FAILURE } from '../reducers/user';\nimport axios from 'axios'; //서버에 요청 보내는 부분\n\nfunction loginAPI() {\n  return axios.post('/post');\n}\n\nfunction login() {\n  return _regeneratorRuntime.wrap(function login$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          _context.next = 3;\n          return delay(2000);\n\n        case 3:\n          _context.next = 5;\n          return put({\n            type: LOG_IN_SUCCESS\n          });\n\n        case 5:\n          _context.next = 12;\n          break;\n\n        case 7:\n          _context.prev = 7;\n          _context.t0 = _context[\"catch\"](0);\n          console.log(_context.t0);\n          _context.next = 12;\n          return put({\n            type: LOG_OUT_SUCCESS\n          });\n\n        case 12:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[0, 7]]);\n}\n\nfunction watchLogin() {\n  return _regeneratorRuntime.wrap(function watchLogin$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.next = 2;\n          return takeEvery(LOG_IN_REQUEST, login);\n\n        case 2:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2);\n}\n\n;\n\nfunction signUpAPI() {\n  //서버에 요청을 보내는 부분\n  return axios.post('/signup');\n}\n\nfunction signUp() {\n  return _regeneratorRuntime.wrap(function signUp$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.prev = 0;\n          _context3.next = 3;\n          return delay(2000);\n\n        case 3:\n          _context3.next = 5;\n          return put({\n            type: SIGN_UP_SUCCESS\n          });\n\n        case 5:\n          _context3.next = 11;\n          break;\n\n        case 7:\n          _context3.prev = 7;\n          _context3.t0 = _context3[\"catch\"](0);\n          _context3.next = 11;\n          return put({\n            type: SIGN_UP_FAILURE,\n            error: _context3.t0\n          });\n\n        case 11:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3, null, [[0, 7]]);\n}\n\nfunction watchSignUp() {\n  return _regeneratorRuntime.wrap(function watchSignUp$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          _context4.next = 2;\n          return takeEvery(SIGN_UP_REQUEST, signUp);\n\n        case 2:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, _marked4);\n}\n\nexport default function userSaga() {\n  return _regeneratorRuntime.wrap(function userSaga$(_context5) {\n    while (1) {\n      switch (_context5.prev = _context5.next) {\n        case 0:\n          _context5.next = 2;\n          return all([fork(watchLogin), falk(watchSignUp)]);\n\n        case 2:\n        case \"end\":\n          return _context5.stop();\n      }\n    }\n  }, _marked5);\n}","map":{"version":3,"sources":["/home/minsu/바탕화면/sns/ch1/front/sagas/user.js"],"names":["login","watchLogin","signUp","watchSignUp","userSaga","all","fork","call","takeLatest","takeEvery","put","take","delay","LOG_IN_REQUEST","LOG_IN_SUCCESS","LOG_IN_FAILURE","SIGN_UP_REQUEST","SIGN_UP_SUCCESS","SIGN_UP_FAILURE","axios","loginAPI","post","type","console","log","LOG_OUT_SUCCESS","signUpAPI","error","falk"],"mappings":";;;;yBA8BUA,K;;;yBAeAC,U;;;yBASAC,M;;;yBAeAC,W;;;yBAIeC,Q;;AAzEzB;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA,SAASC,GAAT,EAAcC,IAAd,EAAoBC,IAApB,EAA0BC,UAA1B,EAAsCC,SAAtC,EAAiDC,GAAjD,EAAsDC,IAAtD,EAA4DC,KAA5D,QAAyE,oBAAzE,C,CAEA;;AACA,SACEC,cADF,EAEEC,cAFF,EAGEC,cAHF,EAIEC,eAJF,EAKEC,eALF,EAMEC,eANF,QAMyB,kBANzB;AAOA,OAAOC,KAAP,MAAkB,OAAlB,C,CAEA;;AACA,SAASC,QAAT,GAAoB;AAClB,SAAOD,KAAK,CAACE,IAAN,CAAW,OAAX,CAAP;AACD;;AAED,SAAUrB,KAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGI,iBAAMY,KAAK,CAAC,IAAD,CAAX;;AAHJ;AAAA;AAII,iBAAMF,GAAG,CAAC;AACRY,YAAAA,IAAI,EAAER;AADE,WAAD,CAAT;;AAJJ;AAAA;AAAA;;AAAA;AAAA;AAAA;AAQIS,UAAAA,OAAO,CAACC,GAAR;AARJ;AASI,iBAAMd,GAAG,CAAC;AACRY,YAAAA,IAAI,EAAEG;AADE,WAAD,CAAT;;AATJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAeA,SAAUxB,UAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACE,iBAAMQ,SAAS,CAACI,cAAD,EAAiBb,KAAjB,CAAf;;AADF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAEC;;AAED,SAAS0B,SAAT,GAAqB;AACnB;AACA,SAAOP,KAAK,CAACE,IAAN,CAAW,SAAX,CAAP;AACD;;AAED,SAAUnB,MAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGI,iBAAMU,KAAK,CAAC,IAAD,CAAX;;AAHJ;AAAA;AAII,iBAAMF,GAAG,CAAC;AACRY,YAAAA,IAAI,EAAEL;AADE,WAAD,CAAT;;AAJJ;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAQI,iBAAMP,GAAG,CAAC;AACRY,YAAAA,IAAI,EAAEJ,eADE;AAERS,YAAAA,KAAK;AAFG,WAAD,CAAT;;AARJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAeA,SAAUxB,WAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACE,iBAAMM,SAAS,CAAEO,eAAF,EAAmBd,MAAnB,CAAf;;AADF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAIA,eAAe,SAAUE,QAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACb,iBAAMC,GAAG,CAAC,CACRC,IAAI,CAACL,UAAD,CADI,EAER2B,IAAI,CAACzB,WAAD,CAFI,CAAD,CAAT;;AADa;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["//put은 dispatch = action을 받아서 실행하는 놈\n//take는 action을 받는 놈\n\n//takeEvery 는 모든 action을 다 받고 실행\n//takeLatest는 이전 요청이 끝나지 않은게 있다면 이전 요청을 취소함\n//--> 보통 로그인 버튼 여러번 클릭하면 서버에 계속 전송 되는 걸 막을 때 사용 됨\n\n//takeEvery VS takeLatest\n//--> takeEvery의 경우 모든 이벤트를 모두 유효처리 할 때, takeLatest는 앞선 이벤트들은 모두 실수라 보고 마지막 이벤트만 유효처리할 때\n\n//call과 fork 모두 함수 실행 메서드\n//call은 동기호출(보통 서버와 통신할 때 주로 쓰임)\n//fork는 비동기호출\nimport { all, fork, call, takeLatest, takeEvery, put, take, delay } from 'redux-saga/effects';\n\n//서버로 갔다 와야하는 비동기처리 Action들은 SAGA에서 모두 처리 해준다\nimport { \n  LOG_IN_REQUEST, \n  LOG_IN_SUCCESS,\n  LOG_IN_FAILURE,\n  SIGN_UP_REQUEST,\n  SIGN_UP_SUCCESS,\n  SIGN_UP_FAILURE } from '../reducers/user';\nimport axios from 'axios';\n\n//서버에 요청 보내는 부분\nfunction loginAPI() {\n  return axios.post('/post')\n}\n\nfunction* login() {\n  try {\n    // yield call(loginAPI);\n    yield delay(2000)\n    yield put({\n      type: LOG_IN_SUCCESS\n    })\n  } catch(e) {\n    console.log(e)\n    yield put({\n      type: LOG_OUT_SUCCESS\n    })\n  }\n}\n\nfunction* watchLogin() {\n  yield takeEvery(LOG_IN_REQUEST, login);\n};\n\nfunction signUpAPI() {\n  //서버에 요청을 보내는 부분\n  return axios.post('/signup')\n}\n\nfunction* signUp() {\n  try {\n    // yield call(signUpAPI)\n    yield delay(2000)\n    yield put({\n      type: SIGN_UP_SUCCESS\n    })\n  } catch(e) {\n    yield put({\n      type: SIGN_UP_FAILURE,\n      error: e\n    })\n  }\n}\n\nfunction* watchSignUp() {\n  yield takeEvery( SIGN_UP_REQUEST, signUp )\n}\n\nexport default function* userSaga() {\n  yield all([\n    fork(watchLogin),\n    falk(watchSignUp),\n  ])\n}\n\n"]},"metadata":{},"sourceType":"module"}