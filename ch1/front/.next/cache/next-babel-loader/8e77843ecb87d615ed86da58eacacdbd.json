{"ast":null,"code":"//put은 dispatch = action을 받아서 실행하는 놈\n//take는 action을 받는 놈\n//takeEvery 는 모든 action을 다 받고 실행\n//takeLatest는 이전 요청이 끝나지 않은게 있다면 이전 요청을 취소함\n//--> 보통 로그인 버튼 여러번 클릭하면 서버에 계속 전송 되는 걸 막을 때 사용 됨\n//takeEvery VS takeLatest\n//--> takeEvery의 경우 모든 이벤트를 모두 유효처리 할 때, takeLatest는 앞선 이벤트들은 모두 실수라 보고 마지막 이벤트만 유효처리할 때\n//call과 fork 모두 함수 실행 메서드\n//call은 동기호출(보통 서버와 통신할 때 주로 쓰임)\n//fork는 비동기호출\nimport { all, fork, call, takeLatest, takeEvery, put, take, delay } from 'redux-saga/effects'; //서버로 갔다 와야하는 비동기처리 Action들은 SAGA에서 모두 처리 해준다\n\nimport { LOG_IN_REQUEST, LOG_IN_SUCCESS, LOG_IN_FAILURE, SIGN_UP_REQUEST, SIGN_UP_SUCCESS, SIGN_UP_FAILURE } from '../reducers/user';\nimport axios from 'axios'; //서버에 요청 보내는 부분\n\nfunction loginAPI() {\n  return axios.post('/post');\n}\n\nfunction* login() {\n  try {\n    // yield call(loginAPI);\n    yield delay(2000);\n    yield put({\n      type: LOG_IN_SUCCESS\n    });\n  } catch (e) {\n    console.log(e);\n    yield put({\n      type: LOG_OUT_SUCCESS\n    });\n  }\n}\n\nfunction* watchLogin() {\n  yield takeEvery(LOG_IN_REQUEST, login);\n}\n\n;\n\nfunction signUpAPI() {\n  //서버에 요청을 보내는 부분\n  return axios.post('/signup');\n}\n\nfunction* signUp() {\n  try {\n    // yield call(signUpAPI)\n    yield delay(2000);\n    yield put({\n      type: SIGN_UP_SUCCESS\n    });\n  } catch (e) {\n    yield put({\n      type: SIGN_UP_FAILURE,\n      error: e\n    });\n  }\n}\n\nfunction* watchSignUp() {\n  yield takeEvery(SIGN_UP_REQUEST, signUp);\n}\n\nexport default function* userSaga() {\n  yield all([fork(watchLogin), fork(watchSignUp)]);\n}","map":{"version":3,"sources":["/home/minsu/바탕화면/sns/ch1/front/sagas/user.js"],"names":["all","fork","call","takeLatest","takeEvery","put","take","delay","LOG_IN_REQUEST","LOG_IN_SUCCESS","LOG_IN_FAILURE","SIGN_UP_REQUEST","SIGN_UP_SUCCESS","SIGN_UP_FAILURE","axios","loginAPI","post","login","type","e","console","log","LOG_OUT_SUCCESS","watchLogin","signUpAPI","signUp","error","watchSignUp","userSaga"],"mappings":"AAAA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA,SAASA,GAAT,EAAcC,IAAd,EAAoBC,IAApB,EAA0BC,UAA1B,EAAsCC,SAAtC,EAAiDC,GAAjD,EAAsDC,IAAtD,EAA4DC,KAA5D,QAAyE,oBAAzE,C,CAEA;;AACA,SACEC,cADF,EAEEC,cAFF,EAGEC,cAHF,EAIEC,eAJF,EAKEC,eALF,EAMEC,eANF,QAMyB,kBANzB;AAOA,OAAOC,KAAP,MAAkB,OAAlB,C,CAEA;;AACA,SAASC,QAAT,GAAoB;AAClB,SAAOD,KAAK,CAACE,IAAN,CAAW,OAAX,CAAP;AACD;;AAED,UAAUC,KAAV,GAAkB;AAChB,MAAI;AACF;AACA,UAAMV,KAAK,CAAC,IAAD,CAAX;AACA,UAAMF,GAAG,CAAC;AACRa,MAAAA,IAAI,EAAET;AADE,KAAD,CAAT;AAGD,GAND,CAME,OAAMU,CAAN,EAAS;AACTC,IAAAA,OAAO,CAACC,GAAR,CAAYF,CAAZ;AACA,UAAMd,GAAG,CAAC;AACRa,MAAAA,IAAI,EAAEI;AADE,KAAD,CAAT;AAGD;AACF;;AAED,UAAUC,UAAV,GAAuB;AACrB,QAAMnB,SAAS,CAACI,cAAD,EAAiBS,KAAjB,CAAf;AACD;;AAAA;;AAED,SAASO,SAAT,GAAqB;AACnB;AACA,SAAOV,KAAK,CAACE,IAAN,CAAW,SAAX,CAAP;AACD;;AAED,UAAUS,MAAV,GAAmB;AACjB,MAAI;AACF;AACA,UAAMlB,KAAK,CAAC,IAAD,CAAX;AACA,UAAMF,GAAG,CAAC;AACRa,MAAAA,IAAI,EAAEN;AADE,KAAD,CAAT;AAGD,GAND,CAME,OAAMO,CAAN,EAAS;AACT,UAAMd,GAAG,CAAC;AACRa,MAAAA,IAAI,EAAEL,eADE;AAERa,MAAAA,KAAK,EAAEP;AAFC,KAAD,CAAT;AAID;AACF;;AAED,UAAUQ,WAAV,GAAwB;AACtB,QAAMvB,SAAS,CAAEO,eAAF,EAAmBc,MAAnB,CAAf;AACD;;AAED,eAAe,UAAUG,QAAV,GAAqB;AAClC,QAAM5B,GAAG,CAAC,CACRC,IAAI,CAACsB,UAAD,CADI,EAERtB,IAAI,CAAC0B,WAAD,CAFI,CAAD,CAAT;AAID","sourcesContent":["//put은 dispatch = action을 받아서 실행하는 놈\n//take는 action을 받는 놈\n\n//takeEvery 는 모든 action을 다 받고 실행\n//takeLatest는 이전 요청이 끝나지 않은게 있다면 이전 요청을 취소함\n//--> 보통 로그인 버튼 여러번 클릭하면 서버에 계속 전송 되는 걸 막을 때 사용 됨\n\n//takeEvery VS takeLatest\n//--> takeEvery의 경우 모든 이벤트를 모두 유효처리 할 때, takeLatest는 앞선 이벤트들은 모두 실수라 보고 마지막 이벤트만 유효처리할 때\n\n//call과 fork 모두 함수 실행 메서드\n//call은 동기호출(보통 서버와 통신할 때 주로 쓰임)\n//fork는 비동기호출\nimport { all, fork, call, takeLatest, takeEvery, put, take, delay } from 'redux-saga/effects';\n\n//서버로 갔다 와야하는 비동기처리 Action들은 SAGA에서 모두 처리 해준다\nimport { \n  LOG_IN_REQUEST, \n  LOG_IN_SUCCESS,\n  LOG_IN_FAILURE,\n  SIGN_UP_REQUEST,\n  SIGN_UP_SUCCESS,\n  SIGN_UP_FAILURE } from '../reducers/user';\nimport axios from 'axios';\n\n//서버에 요청 보내는 부분\nfunction loginAPI() {\n  return axios.post('/post')\n}\n\nfunction* login() {\n  try {\n    // yield call(loginAPI);\n    yield delay(2000)\n    yield put({\n      type: LOG_IN_SUCCESS\n    })\n  } catch(e) {\n    console.log(e)\n    yield put({\n      type: LOG_OUT_SUCCESS\n    })\n  }\n}\n\nfunction* watchLogin() {\n  yield takeEvery(LOG_IN_REQUEST, login);\n};\n\nfunction signUpAPI() {\n  //서버에 요청을 보내는 부분\n  return axios.post('/signup')\n}\n\nfunction* signUp() {\n  try {\n    // yield call(signUpAPI)\n    yield delay(2000)\n    yield put({\n      type: SIGN_UP_SUCCESS\n    })\n  } catch(e) {\n    yield put({\n      type: SIGN_UP_FAILURE,\n      error: e\n    })\n  }\n}\n\nfunction* watchSignUp() {\n  yield takeEvery( SIGN_UP_REQUEST, signUp )\n}\n\nexport default function* userSaga() {\n  yield all([\n    fork(watchLogin),\n    fork(watchSignUp),\n  ])\n}\n\n"]},"metadata":{},"sourceType":"module"}