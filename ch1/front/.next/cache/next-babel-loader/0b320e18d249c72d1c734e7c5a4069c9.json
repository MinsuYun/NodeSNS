{"ast":null,"code":"import _objectSpread from \"@babel/runtime-corejs2/helpers/esm/objectSpread\";\n//dummy User\nvar dummyUser = {\n  nickname: \"윤민수\",\n  Post: [],\n  Followings: [],\n  Followers: []\n}; //intial State\n\nexport var initialState = {\n  isLoggedIn: false,\n  user: null,\n  signupData: {},\n  loginData: {}\n}; //Action 이름정하기\n\nvar LOG_IN = 'LOG_IN';\nvar LOG_OUT = 'LOG_OUT';\nvar SIGN_UP = 'SIGN_UP';\nvar LOG_IN_SUCCESS = 'LOG_IN_SUCCESS';\nvar LOG_IN_FAILURE = 'LOG_IN_FAILURE'; //Action 의 결과 적기\n//여기서 type이 정말 중요하다.\n//data 는 state값에 들어갈 데이터들을 정의해주는 곳이다.\n\nexport var loginAction = function loginAction(data) {\n  return {\n    type: LOG_IN,\n    data: data\n  };\n};\nexport var logoutAction = {\n  type: LOG_OUT\n};\nexport var signupAction = function signupAction(data) {\n  return {\n    type: SIGN_UP,\n    data: data\n  };\n}; //reducer 생성\n//반드시 reducer는 action의 값을 받아 initialState를 바꿔주는 역할을 하기에 인자로써, initialState와 action을 넣어준다\n\nvar reducer = function reducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case LOG_IN:\n      {\n        return _objectSpread({}, state, {\n          isLoggedIn: true,\n          user: dummyUser,\n          loginData: action.data\n        });\n      }\n\n    case LOG_OUT:\n      {\n        return _objectSpread({}, state, {\n          isLoggedIn: false,\n          user: null\n        });\n      }\n\n    case SIGN_UP:\n      {\n        return _objectSpread({}, state, {\n          signupData: action.data\n        });\n      }\n\n    default:\n      {\n        return _objectSpread({}, state);\n      }\n  }\n};\n\nexport default reducer;","map":{"version":3,"sources":["/home/minsu/바탕화면/sns/ch1/front/reducers/user.js"],"names":["dummyUser","nickname","Post","Followings","Followers","initialState","isLoggedIn","user","signupData","loginData","LOG_IN","LOG_OUT","SIGN_UP","LOG_IN_SUCCESS","LOG_IN_FAILURE","loginAction","data","type","logoutAction","signupAction","reducer","state","action"],"mappings":";AAAA;AACA,IAAMA,SAAS,GAAG;AAChBC,EAAAA,QAAQ,EAAE,KADM;AAEhBC,EAAAA,IAAI,EAAE,EAFU;AAGhBC,EAAAA,UAAU,EAAE,EAHI;AAIhBC,EAAAA,SAAS,EAAE;AAJK,CAAlB,C,CAOA;;AACA,OAAO,IAAMC,YAAY,GAAG;AAC1BC,EAAAA,UAAU,EAAG,KADa;AAE1BC,EAAAA,IAAI,EAAE,IAFoB;AAG1BC,EAAAA,UAAU,EAAE,EAHc;AAI1BC,EAAAA,SAAS,EAAE;AAJe,CAArB,C,CAOP;;AACA,IAAMC,MAAM,GAAG,QAAf;AACA,IAAMC,OAAO,GAAG,SAAhB;AACA,IAAMC,OAAO,GAAG,SAAhB;AACA,IAAMC,cAAc,GAAG,gBAAvB;AACA,IAAMC,cAAc,GAAG,gBAAvB,C,CACA;AACA;AACA;;AACA,OAAO,IAAMC,WAAW,GAAG,SAAdA,WAAc,CAACC,IAAD,EAAU;AACnC,SAAO;AACPC,IAAAA,IAAI,EAAEP,MADC;AAEPM,IAAAA,IAAI,EAAEA;AAFC,GAAP;AAID,CALM;AAOP,OAAO,IAAME,YAAY,GAAG;AAC1BD,EAAAA,IAAI,EAAGN;AADmB,CAArB;AAIP,OAAO,IAAMQ,YAAY,GAAG,SAAfA,YAAe,CAACH,IAAD,EAAU;AACpC,SAAO;AACLC,IAAAA,IAAI,EAAEL,OADD;AAELI,IAAAA,IAAI,EAAEA;AAFD,GAAP;AAID,CALM,C,CAOP;AACA;;AACA,IAAMI,OAAO,GAAG,SAAVA,OAAU,GAAoC;AAAA,MAAlCC,KAAkC,uEAA1BhB,YAA0B;AAAA,MAAZiB,MAAY;;AAClD,UAAOA,MAAM,CAACL,IAAd;AACE,SAAKP,MAAL;AAAc;AACZ,iCACKW,KADL;AAEAf,UAAAA,UAAU,EAAE,IAFZ;AAGAC,UAAAA,IAAI,EAAEP,SAHN;AAIAS,UAAAA,SAAS,EAAEa,MAAM,CAACN;AAJlB;AAMH;;AACC,SAAKL,OAAL;AAAe;AACb,iCACKU,KADL;AAEEf,UAAAA,UAAU,EAAE,KAFd;AAGEC,UAAAA,IAAI,EAAG;AAHT;AAKD;;AAED,SAAKK,OAAL;AAAe;AACb,iCACKS,KADL;AAEEb,UAAAA,UAAU,EAAEc,MAAM,CAACN;AAFrB;AAID;;AAED;AAAS;AACP,iCACKK,KADL;AAGD;AA5BH;AA8BD,CA/BD;;AAiCA,eAAeD,OAAf","sourcesContent":["//dummy User\nconst dummyUser = {\n  nickname: \"윤민수\",\n  Post: [],\n  Followings: [],\n  Followers: []\n}\n\n//intial State\nexport const initialState = {\n  isLoggedIn : false,\n  user: null,\n  signupData: {},\n  loginData: {}\n}\n\n//Action 이름정하기\nconst LOG_IN = 'LOG_IN';\nconst LOG_OUT = 'LOG_OUT';\nconst SIGN_UP = 'SIGN_UP';\nconst LOG_IN_SUCCESS = 'LOG_IN_SUCCESS';\nconst LOG_IN_FAILURE = 'LOG_IN_FAILURE';\n//Action 의 결과 적기\n//여기서 type이 정말 중요하다.\n//data 는 state값에 들어갈 데이터들을 정의해주는 곳이다.\nexport const loginAction = (data) => {\n  return {\n  type: LOG_IN,\n  data: data\n  }\n}\n\nexport const logoutAction = {\n  type : LOG_OUT,\n}\n\nexport const signupAction = (data) => {\n  return {\n    type: SIGN_UP,\n    data: data,\n  }\n}\n\n//reducer 생성\n//반드시 reducer는 action의 값을 받아 initialState를 바꿔주는 역할을 하기에 인자로써, initialState와 action을 넣어준다\nconst reducer = ( state = initialState, action ) => {\n  switch(action.type) {\n    case LOG_IN : {\n      return {\n        ...state,\n      isLoggedIn: true,\n      user: dummyUser,\n      loginData: action.data\n    }\n  } \n    case LOG_OUT : {\n      return {\n        ...state,\n        isLoggedIn: false,\n        user : null\n      }\n    }\n\n    case SIGN_UP : {\n      return {\n        ...state,\n        signupData: action.data\n        }\n    }\n\n    default: {\n      return {\n        ...state,\n      }\n    }  \n  }\n}\n\nexport default reducer;"]},"metadata":{},"sourceType":"module"}