{"ast":null,"code":"var _jsxFileName = \"/home/minsu/\\uBC14\\uD0D5\\uD654\\uBA74/sns/ch1/front/pages/_app.js\";\nvar __jsx = React.createElement;\nimport React from 'react';\nimport Head from 'next/head';\nimport AppLayout from '../components/AppLayout'; //redux 연결하기\n\nimport { createStore, compose, applyMiddleware } from 'redux';\nimport { Provider } from 'react-redux';\nimport reducer from '../reducers';\nimport withRedux from 'next-redux-wrapper';\nimport createSagaMiddleware from 'redux-saga';\nimport rootSaga from '../sagas';\n\nconst NodeBird = ({\n  Component,\n  store\n}) => {\n  return __jsx(React.Fragment, null, __jsx(Provider, {\n    store: store,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 16\n    },\n    __self: this\n  }, __jsx(Head, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 18\n    },\n    __self: this\n  }, __jsx(\"title\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 19\n    },\n    __self: this\n  }, \"NodeBird\"), __jsx(\"link\", {\n    rel: \"stylesheet\",\n    href: \"https://cdnjs.cloudflare.com/ajax/libs/antd/3.23.3/antd.css\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 20\n    },\n    __self: this\n  }), __jsx(\"script\", {\n    src: \"https://cdnjs.cloudflare.com/ajax/libs/antd/3.23.3/antd.js\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 21\n    },\n    __self: this\n  })), __jsx(AppLayout, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25\n    },\n    __self: this\n  }, __jsx(Component, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26\n    },\n    __self: this\n  }))));\n}; //그냥 외우는 부분이다. redux 에서 조금 더 강화된 기능들을 쓰고 싶다면 이 작업을 시행히야 한다. 리덕스 dev tools , Redux Saga 등을 사용하기 위해서는 이렇게 Redux 기본 기능에 여러 기능들을 합성시켜줘야한다.\n//그리고 해당 부분에서 stroe를 생성해줘야 const store = createStore( reducer, initialState, enhancer )을 생성하여 return 까지 해줘야 전체 페이지에서 Store에 접근할 수 있게 된다.\n\n\nexport default withRedux((initialState, options) => {\n  const middlewares = [sagaMiddleware];\n  const enhancer = process.env.NODE_ENV === 'production' ? compose(applyMiddleware(...middlewares), !options.isServer && window.__REDUX_DEVTOOLS_EXTENSION__ !== 'undefined' ? window.__REDUX_DEVTOOLS_EXTENSION__() : f => f) : compose(applyMiddleware(...middlewares)); //store를 여기서 맨들어야함\n\n  const store = createStore(reducer, initialState, enhancer);\n  sagaMiddleware.run(rootSaga);\n  return store;\n})(NodeBird);","map":{"version":3,"sources":["/home/minsu/바탕화면/sns/ch1/front/pages/_app.js"],"names":["React","Head","AppLayout","createStore","compose","applyMiddleware","Provider","reducer","withRedux","createSagaMiddleware","rootSaga","NodeBird","Component","store","initialState","options","middlewares","sagaMiddleware","enhancer","process","env","NODE_ENV","isServer","window","__REDUX_DEVTOOLS_EXTENSION__","f","run"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,IAAP,MAAiB,WAAjB;AACA,OAAOC,SAAP,MAAsB,yBAAtB,C,CACA;;AACA,SAASC,WAAT,EAAsBC,OAAtB,EAA+BC,eAA/B,QAAsD,OAAtD;AACA,SAAUC,QAAV,QAA0B,aAA1B;AACA,OAAOC,OAAP,MAAoB,aAApB;AACA,OAAOC,SAAP,MAAsB,oBAAtB;AACA,OAAOC,oBAAP,MAAiC,YAAjC;AACA,OAAOC,QAAP,MAAqB,UAArB;;AAEA,MAAMC,QAAQ,GAAG,CAAC;AAAEC,EAAAA,SAAF;AAAaC,EAAAA;AAAb,CAAD,KAA0B;AACzC,SACE,4BAEA,MAAC,QAAD;AAAU,IAAA,KAAK,EAAEA,KAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAEC,MAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADD,EAEC;AAAM,IAAA,GAAG,EAAC,YAAV;AAAuB,IAAA,IAAI,EAAC,6DAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFD,EAGC;AAAQ,IAAA,GAAG,EAAC,4DAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAHD,CAFD,EASC,MAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CATD,CAFA,CADF;AAkBD,CAnBD,C,CAqBA;AACA;;;AACA,eAAeL,SAAS,CAAC,CAACM,YAAD,EAAeC,OAAf,KAA2B;AAClD,QAAMC,WAAW,GAAG,CAACC,cAAD,CAApB;AACA,QAAMC,QAAQ,GAAGC,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAAzB,GACjBjB,OAAO,CACLC,eAAe,CAAC,GAAGW,WAAJ,CADV,EAEL,CAACD,OAAO,CAACO,QAAT,IAAqBC,MAAM,CAACC,4BAAP,KAAwC,WAA7D,GAA2ED,MAAM,CAACC,4BAAP,EAA3E,GAAoHC,CAAD,IAAOA,CAFrH,CADU,GAKhBrB,OAAO,CACNC,eAAe,CAAC,GAAGW,WAAJ,CADT,CALR,CAFkD,CAUlD;;AACA,QAAMH,KAAK,GAAGV,WAAW,CAAEI,OAAF,EAAWO,YAAX,EAAyBI,QAAzB,CAAzB;AACAD,EAAAA,cAAc,CAACS,GAAf,CAAmBhB,QAAnB;AAEA,SAAOG,KAAP;AACD,CAfuB,CAAT,CAeZF,QAfY,CAAf","sourcesContent":["import React from 'react';\nimport Head from 'next/head';\nimport AppLayout from '../components/AppLayout';\n//redux 연결하기\nimport { createStore, compose, applyMiddleware } from 'redux';\nimport  { Provider } from 'react-redux';\nimport reducer from '../reducers';\nimport withRedux from 'next-redux-wrapper';\nimport createSagaMiddleware from 'redux-saga';\nimport rootSaga from '../sagas';\n\nconst NodeBird = ({ Component, store }) => {\n  return (\n    <>\n    {/* 모든 페이지에서 리덕스 스토어에 접근하기 위해서는 Provider를 import 하여 감싸줘야한다. */}\n    <Provider store={store}>\n      {/* Head부분은 모든 페이지에 공통적으로 적용 되는 부분이다. 앤트디자인 또는 여러 cdn을 적용하기 위해서는 이곳에 넣으면 된다 */}\n     <Head>\n      <title>NodeBird</title>\n      <link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/antd/3.23.3/antd.css\" />\n      <script src=\"https://cdnjs.cloudflare.com/ajax/libs/antd/3.23.3/antd.js\" />\n     </Head>\n     {/* <Component />는 모든 페이지들을 의미한다. 이렇게 Head태그 아래 Component태그를 삽입하면 Next가 알아서 페이지들을 인식하여 해당페이지들만 화면에 띄우게 된다.  */}\n     {/* 그리고 모든 페이지들은 내가 디자인한 기본 레이아웃에 영향을 받게 된다. 따라서 AppLayout 을 import 해와 이렇게 component를 감싸게 되면 각각의 페이지들 마다 자동적으로 레이아웃이 적용받게 된다. */}\n     <AppLayout>\n       <Component />\n    </AppLayout>\n    </Provider>\n    </>\n  );\n};\n\n//그냥 외우는 부분이다. redux 에서 조금 더 강화된 기능들을 쓰고 싶다면 이 작업을 시행히야 한다. 리덕스 dev tools , Redux Saga 등을 사용하기 위해서는 이렇게 Redux 기본 기능에 여러 기능들을 합성시켜줘야한다.\n//그리고 해당 부분에서 stroe를 생성해줘야 const store = createStore( reducer, initialState, enhancer )을 생성하여 return 까지 해줘야 전체 페이지에서 Store에 접근할 수 있게 된다.\nexport default withRedux((initialState, options) => {\n  const middlewares = [sagaMiddleware];\n  const enhancer = process.env.NODE_ENV === 'production' ? \n  compose(\n    applyMiddleware(...middlewares),\n    !options.isServer && window.__REDUX_DEVTOOLS_EXTENSION__ !== 'undefined' ? window.__REDUX_DEVTOOLS_EXTENSION__() : (f) => f,\n   ) :\n   compose(\n    applyMiddleware(...middlewares),\n   )\n  //store를 여기서 맨들어야함\n  const store = createStore( reducer, initialState, enhancer );\n  sagaMiddleware.run(rootSaga);\n\n  return store;\n})(NodeBird);\n\n"]},"metadata":{},"sourceType":"module"}