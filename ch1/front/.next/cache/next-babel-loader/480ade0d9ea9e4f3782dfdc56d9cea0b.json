{
  "ast": null,
  "code": "import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\n\nvar _marked =\n/*#__PURE__*/\n_regeneratorRuntime.mark(login),\n    _marked2 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(watchLogin),\n    _marked3 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(userSaga);\n\nimport { all, fork, takeLatest, call, put, take } from 'redux-saga/effects';\nimport { LOG_IN, LOG_IN_SUCCESS, LOG_IN_FAILURE } from '../reducers/user';\nvar HELLO_SAGA = 'HELLO_SAGA'; //서버에 요청 보내는 부분\n\nfunction loginAPI() {}\n\nfunction login() {\n  return _regeneratorRuntime.wrap(function login$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          _context.next = 3;\n          return delay(4);\n\n        case 3:\n          _context.next = 5;\n          return put({\n            type: LOG_IN_SUCCESS\n          });\n\n        case 5:\n          _context.next = 12;\n          break;\n\n        case 7:\n          _context.prev = 7;\n          _context.t0 = _context[\"catch\"](0);\n          console.error(_context.t0);\n          _context.next = 12;\n          return put({\n            type: LOG_IN_FAILURE\n          });\n\n        case 12:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[0, 7]]);\n}\n\nfunction watchLogin() {\n  return _regeneratorRuntime.wrap(function watchLogin$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.next = 2;\n          return take(LOG_IN);\n\n        case 2:\n          _context2.next = 4;\n          return put({\n            type: LOG_IN_SUCCESS\n          });\n\n        case 4:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2);\n}\n\n;\nexport default function userSaga() {\n  return _regeneratorRuntime.wrap(function userSaga$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.next = 2;\n          return all(watchLogin(), watchSignUp());\n\n        case 2:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3);\n}",
  "map": {
    "version": 3,
    "sources": ["/home/minsu/바탕화면/sns/ch1/front/sagas/user.js"],
    "names": [
      "login",
      "watchLogin",
      "userSaga",
      "all",
      "fork",
      "takeLatest",
      "call",
      "put",
      "take",
      "LOG_IN",
      "LOG_IN_SUCCESS",
      "LOG_IN_FAILURE",
      "HELLO_SAGA",
      "loginAPI",
      "delay",
      "type",
      "console",
      "error",
      "LOG_IN",
      "watchSignUp"
    ],
    "mappings": ";;;;yBAUUA,K;;;yBAcAC,U;;;yBAOeC,Q;;AA/BzB,SAASC,GAAT,EAAcC,IAAd,EAAoBC,UAApB,EAAgCC,IAAhC,EAAsCC,GAAtC,EAA2CC,IAA3C,QAAuD,oBAAvD;AACA,SAASC,MAAT,EAAiBC,cAAjB,EAAiCC,cAAjC,QAAuD,kBAAvD;AAEA,IAAMC,UAAU,GAAG,YAAnB,C,CAEA;;AACA,SAASC,QAAT,GAAoB,CAEnB;;AAED,SAAUb,KAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEI,iBAAMc,KAAK,CAAC,CAAD,CAAX;;AAFJ;AAAA;AAGI,iBAAMP,GAAG,CAAC;AACRQ,YAAAA,IAAI,EAAEL;AADE,WAAD,CAAT;;AAHJ;AAAA;AAAA;;AAAA;AAAA;AAAA;AAOIM,UAAAA,OAAO,CAACC,KAAR;AAPJ;AAQI,iBAAMV,GAAG,CAAC;AACRQ,YAAAA,IAAI,EAAEJ;AADE,WAAD,CAAT;;AARJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAcA,SAAUV,UAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACE,iBAAMO,IAAI,CAACU,MAAD,CAAV;;AADF;AAAA;AAEE,iBAAMX,GAAG,CAAC;AACRQ,YAAAA,IAAI,EAAEL;AADE,WAAD,CAAT;;AAFF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAKC;AAED,eAAe,SAAUR,QAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACb,iBAAMC,GAAG,CACPF,UAAU,EADH,EAEPkB,WAAW,EAFJ,CAAT;;AADa;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA",
    "sourcesContent": [
      "import { all, fork, takeLatest, call, put, take } from 'redux-saga/effects';\nimport { LOG_IN, LOG_IN_SUCCESS, LOG_IN_FAILURE } from '../reducers/user';\n\nconst HELLO_SAGA = 'HELLO_SAGA';\n\n//서버에 요청 보내는 부분\nfunction loginAPI() {\n  \n}\n\nfunction* login() {\n  try {\n    yield delay(4);\n    yield put({\n      type: LOG_IN_SUCCESS\n    })\n  } catch (e) {\n    console.error(e);\n    yield put({\n      type: LOG_IN_FAILURE\n    });\n  }\n}\n\nfunction* watchLogin() {\n  yield take(LOG_IN);\n  yield put({\n    type: LOG_IN_SUCCESS\n  })\n};\n\nexport default function* userSaga() {\n  yield all(\n    watchLogin(),\n    watchSignUp(),\n  )\n}"
    ]
  },
  "metadata": {},
  "sourceType": "module"
}
